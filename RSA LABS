                                                         RSA Labs 
After downloading the challenge and giving it execution permission (chmod +x rsalabs.bin)
and opening the file using the sudo ./rsalab.bin (downloads directory)
EXPONENTIAL--Challenge 1
 ANSWER:
8185238911167211974885360734041977461678695642530470604113609536402467726891292207138824559459868678212333782814712 


(201531894137357801937507316942637071358**3) used **

MODULAR EXPONENTIAL--Challenge 2

a = 11941925303411209348531334932830466291946034301756354041884106452586018537045548254477584581145003791850502963152540973533556912326929995226543087203356441
b = 65537
c = 12081119646819624328715224469366880402640517618777792852697306879262431111815165298398632770390391033245249514188404807170307247662117017771896868993777711

 ANSWER 448378203247     used  (a**b) %c
  
b'hello'

CHALLENGE 3
answer= b'Go0d_j0b'
bytes_to_long



CHALLENGE 4
  answer=1346354641729722100187923714176357
byte= b'BabyBubbleBlue'
USED: long_to_bytes 

                     SET 1  bi0s{M4tH_fr35h3R} 



CHALLENGE  5

 PLAINTEXT------- INT 350144463489663049710642001132216686
CIPHER TEXT------6584182118501646768363421991538669063606103920354066704436430411158183726872471764976066842619687881781513873223593106383006513073650268730109053717440207009119
8691518643224414083249147574431927632121449271285763346553880311808742497116331837887554541969490298562797549245911541637635558037327945225165024500

Solution: Converting the given message to bytes and then as given (plaintext**e) mod n 
i used pow(plaintext**e) mod n



CHALLENGE  6
Given:
cipher text=65730873122241583977501942857521551655862419814142537467794605641487141508168112705849405463650251324036527189894154256188004834922930955553552265141530965811
260529590272915364722691816042276879149322147841179897567021900202362768433876414051764129620855986733911359793478284982158956094706335405419253842189

d= 89251284341640489096918922591701257646451917214324437853236147012137012639315313697720086398595718844693820299212053952353479400606835246986852876111439523655
25998671937582532821556277881627223397225198920561405991438268419762030177758609618433197246606436834237687551093357836921900203688931921921080815809

n = 10000446951441430558975509368938836249573464350273859948003996181799321930830582516340368101051064499785773467172953290947837202047478477657338650951812982110
8046890669622337566827126774027510415874337068146526959087096766707185125814728908178444582703103893060931238382193718440117530400435153460058726227213


Solution:   plain_text= (a**b) % c
print(plain_text)
ANSWER: num=21172439391743988995948375918 
Changing bytes to long answer is b'DinoDominion'



CHALLENGE 7 
Given:
p=285880804885505715088365434821249117591
q = 223548505081667812376946559606986057893

USED:python
answer = (p-1) * (q-1)
print(answer)
63908226563698758712519983971994805249932589491238087753399342371237655520280

                          SET 2  bi0s{RSA_b4s1c5_d0wN}


CHALLENGE 8
Given :
e=65537
phi=6040530736567947369501159510312871912817682485385467038065939221077871371867752621870765479917330035438716285734316075589461070087125307656587738034549424

USED:python 
from Crypto.PublicKey import RSA
from Crypto.Util.number import *
d=inverse(e,phi)
d = inverse(65537,6040530736567947369501159510312871912817682485385467038065939221077871371867752621870765479917330035438716285734316075589461070087125307656587738034549424)
print (d)
2517156635422290349895122850094519613944045480810490330799102798840909214118869098422121935037342009366180047353467080036440206663097061997061371831538593 

CHALLENGE 9

Given:
Since n is given and to get the factors I used factordb(Got this throught online resources) 
p,q values that i got after factorising n are:
p,q=77875213153738183457169866835133610155772314072823133021250433414301022076677   
88741743249819454803256128724422664779772307593666473114032370133748568669343

to get the phi value (p-1)*(q-1)
6910782171213996658397253121710630123795235324197483219005527369298065059694453650969068631666941611266593096250752238844654465825606028206875918814467192----phi


from Crypto.PublicKey import RSA
from Crypto.Util.number import *
d=inverse(e,phi)
2150096105574765275565253080728134461818283538465091213139489190228230565438910995975697840909546354787766196691225386423585219924380226667961609237941713

plaintext = pow(ciphertext,d,n)
23624874839142375659611473345324314095220

long_to_bytes=b'EmaculateElephant'


CHALLENGE 10

Since Public Key Component(e) is given as 3 I used libnum(which i got in a blog) to get the plaintext

pip install libnum

import libnum
ct = 8289500602102531521219476681895977818007154002572409923541320981907276652240946278095987536043114549551856046147274554910030658807410677155239997984613571622794
2541180509399193416
e = 3
m=libnum.nroot(ct,e)
print(m)
436023057342301757154645722844871549372198797575077021377906
from Crypto.PublicKey import RSA
from Crypto.Util.number import *
long_to_bytes(436023057342301757154645722844871549372198797575077021377906)
b"Eve sucks, don't tell her"

       
                                                                SET 3  bi0s{y0u_H4v3_gR4dU4t3d}




                   RSA IN CTFS

Given:
p = 1414257617508824343661136560374655280644469345907475475919130712475580714785230677754243393799025491406823881212465921467553321097049013866715588868604687102895735580
30527361687830155654271762079747974119304854799444200892494664030121777764817864236066664814388946471337642691402213002167546534086524889151493
q = 1570060515515547494479484611541660692807412335399090388771222966281552504720277787395862102912849246722643981789977048387531970735885537718948280803216192424955862140
68036432855351448569359716239160693646942321157830455018125670551341322931414201893347339591241482474678282700265976542303742266087201779118319
e = 65537
n=p*q
n=22204700440176947373083407310789067921647388395591369774263643490204742012819673787576295120740156032370481484074210323886361286589365370847672088408621834406
4241743589479249996367479060780936309535776808538975639937696177481875772847793819522087354435364402691205305214607382376407044610442289750482079859564423517655
0560850001736002084229159224522164146421801493862446496927353081163770802977343335036342861557956291328500617900796081027001129835739232225908777167214515369195
0185951858607960889299525570619737097520918872705453508248691395460604335638223623529001562216829419738394086214570349731509528465562500267

pt=2112725697240595792338701104840001143105965314009156886758430753729193280917949645949820751211929763090437984980301037272483245987121865425732864547619608106734040120161
88468499208459668398237625540579890819422833404255743483725622590189339880946767578921701636254515117597448553088856050012163705998793049355711993371778670310679001955174718
724223895597335947109034955498696467608052644824854040894397479826545120824671505414150516552570593548575578972553010500654499142643662876866598365878931676190550068659138645
5067164175303618412422630098909099013374440591654272123046548115834893961071864282501944948618397178

e = 65537
pow(pt,e,n)

ct=13422947358228206412759363239300464467147075923967824595895099254349262118183013693205472637
using long_to_bytes we get the ct as

b'inctfj{bob_was_authenticated_by_alice}'
